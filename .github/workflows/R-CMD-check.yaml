on:
  push:
    branches:
      - master
  pull_request:
    branches:
      - master
  schedule:
    - cron: "0 0 0 0 *"

name: R-CMD-check

jobs:
  R-CMD-check:
    runs-on: ${{ matrix.config.os }}

    name: ${{ matrix.config.os }} (${{ matrix.config.r }})

    strategy:
      fail-fast: false
      matrix:
        config:
        - { os: windows-latest, r: 'release', args: "'--no-manual'"}
        - { os: macOS-latest,   r: 'release', args: "'--test-dontrun'"}
        - { os: ubuntu-latest,   r: '3.5',     args: "'--no-manual'"}
        - { os: ubuntu-latest,   r: 'oldrel',  args: "'--no-manual'"}
        - { os: ubuntu-latest,   r: 'release', args: "'--no-manual'"}
        - { os: ubuntu-latest,   r: 'devel',   args: "c('--no-manual', '--test-dontrun')"}

    env:
      R_REMOTES_NO_ERRORS_FROM_WARNINGS: true
      RSPM: ${{ matrix.config.rspm }}
      GITHUB_PAT: ${{ secrets.GH_PAT }}
      cache-version: v4

    steps:
      - uses: actions/checkout@v2

      - uses: r-lib/actions/setup-r@master
        with:
          r-version: ${{ matrix.config.r }}

      - uses: r-lib/actions/setup-tinytex@v1
        if: contains(matrix.config.args, 'no-manual') == false

      - uses: r-lib/actions/setup-pandoc@master

      - name: Query dependencies
        run: |
          install.packages('remotes')
          saveRDS(remotes::dev_package_deps(dependencies = TRUE), ".github/depends.Rds", version = 2)
        shell: Rscript {0}

      - name: Cache R packages
        if: runner.os != 'Windows'
        uses: actions/cache@v1
        with:
          path: ${{ env.R_LIBS_USER }}
          key: ${{ env.cache-version }}-${{ runner.os }}-r-${{ matrix.config.r }}-${{ hashFiles('depends.Rds') }}
          restore-keys: ${{ env.cache-version }}-${{ runner.os }}-r-${{ matrix.config.r }}-

      - name: Install macOS system dependencies
        if: runner.os == 'macOS'
        continue-on-error: true
        run: |
          brew install pkg-config gdal udunits

      - name: Install system dependencies
        if: runner.os == 'Linux'
        run: |
          sudo apt-get -y install libharfbuzz-dev libfribidi-dev
          while read -r cmd
          do
            eval sudo $cmd
          done < <(Rscript -e 'writeLines(remotes::system_requirements("ubuntu", "20.04"))')

      - name: Install spatial libraries
        if: runner.os == 'Linux'
        run: sudo apt install libgdal-dev libproj-dev libgeos-dev libudunits2-dev

      - name: Install dependencies
        run: |
          install.packages(c('remotes', 'rcmdcheck'))
          if (Sys.info()["sysname"] == "Darwin") options(pkgType = "binary")
          remotes::install_deps(dependencies = TRUE, configure.args = c('sf' = '${{ matrix.config.sf_args }}'))
        shell: Rscript {0}

      - name: Set httr options
        run: |
          install.packages('httr')
          httr::set_config(httr::config(ssl_verifypeer = FALSE))
        shell: Rscript {0}

      - name: Check
        env:
          _R_CHECK_CRAN_INCOMING_REMOTE_: false
        run: rcmdcheck::rcmdcheck(args = ${{ matrix.config.args }}, error_on = "warning", check_dir = "check")
        shell: Rscript {0}

      - name: Upload check results
        if: failure()
        uses: actions/upload-artifact@master
        with:
          name: ${{ runner.os }}-r${{ matrix.config.r }}-results
          path: check

