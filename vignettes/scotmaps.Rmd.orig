---
title: "Basic use cases"
output: rmarkdown::html_vignette
vignette: >
  %\VignetteIndexEntry{Basic use cases}
  %\VignetteEncoding{UTF-8}
  %\VignetteEngine{knitr::rmarkdown}
editor_options:
  chunk_output_type: console
---

```{r, echo = FALSE, message=FALSE}
knitr::opts_chunk$set(
  collapse = TRUE,
  comment = "#>",
  fig.width=4,
  fig.height=6,
  root.dir="/vignettes"
)

library(scotmaps)

```

<img src="images/sticker.png" height="139"/>

## Introduction

Use `scotmaps` to download map layers from [www.spatialdata.gov.scot](www.spatialdata.gov.scot) with single line of R code. Here we provide a few quick examples of how the package can be used.

## Usage

See all the layers available:

```{r available-layers, eval=FALSE}
library(scotmaps)
available_layers()
```


### Download Layers

Either use `get_layer("name of your layer")` or `name_of_layer()`. For example you can down the marine areas using either of these functions:

```{r}
ma <- get_layer("marine_areas")
# or...
ma <- marine_areas()

```

The first time you run try to access a layer map files, you will be prompted for permission to download that layer to your hard drive.

If you have already downloaded a layer you can see if it's cached by using `cached_layers()`

### Start Mapping!

To plot a map we'll use the `ggplot2` library. This package helps to format and present our data layers.

```{r}
library(ggplot2)

la <- local_authorities()

p <- ggplot(la) +
  geom_sf(data = la, aes(fill = local_authority), size = 0.05) +
  guides(fill = FALSE) +
  scale_fill_discrete() +
  theme_void() +
  theme(panel.grid.major = element_line(colour = "grey60", size = 0.1))

p

```

The `geom_st` recognises the simple feature or `sf` map downloaded layer and plots at a spatial object in the correct map projection.

### Map *all* the Stats

Let's download data from [statistics.gov.scot](https://statistics.gov.scot/home) and display it on a map.
```{r}
# install.packages("devtools")
# devtools::install_github("datasciencescotland/opendatascot")
library(opendatascot)
library(tidyverse)

# Immunisation data
immune <- ods_dataset("6-in-1-immunisation", geography = "la")
immune <- immune %>% filter(vaccinationUptake == "vaccinated-by-24-months",
                     measureType == "ratio",
                     refPeriod == 2018)

immune <- immune %>% mutate(value = as.numeric(value))

# Join to local authority spatial layer
la_immune <- inner_join(la, immune, by = c("code" = "refArea"))

p2 <- la_immune %>%
 ggplot() +
  geom_sf(aes(fill = value)) +
  scale_fill_viridis_c("Ratio") +
  theme_bw() +
  labs(title="6-in-1-immunisation by 24 months (2018)") +
  theme(plot.title = element_text(hjust = 1))

p2

```

Looks good but what about in 3D? Don't worry, `rayshader` package has your back.

```{r, message=FALSE}
# devtools::install_github("tylermorganwall/rayshader")
library(rayshader)
plot_gg(p2, multicore = TRUE)
render_camera(zoom = 0.4, theta = -45, phi = 30)
Sys.sleep(0.2)
render_snapshot()
rgl::rgl.close()

```


### Map your own stats

Let's calculate bicycle parking capacity per person for each local authority in Scotland.

First, download the [bicycle parking](https://wiki.openstreetmap.org/wiki/Tag:amenity%3Dbicycle_parking) data from OpenStreetMap. OpenStreetMap is open data, licensed under the [Open Data Commons Open Database License (ODbL)](https://www.openstreetmap.org/copyright) copyright OpenStreetMap contributors.

```{r}
# install.packages("osmdata")
library(osmdata)
scot <- getbb ("scotland", format_out = "polygon")
bicycles <- opq(scot[[8]][3]) %>%
  add_osm_feature(key = "amenity", value = "bicycle_parking", value_exact = TRUE) %>%
  osmdata_sf()

# Use osm point data
points <- bicycles$osm_points
# Tidy up missing capacity values
points$capacity <- as.numeric(points$capacity)
# Default if capacity not recorded
points$capacity[is.na(points$capacity)] <- median(points$capacity, na.rm = T)
# Convert to same crs as default scotmaps
points <- st_transform(points, crs = 27700)
plot(st_geometry(points), col = points$capacity)
```

Our OpenStreetMap query returned a wider area than Scotland, so let's join points to associated Scottish local authority areas.

```{r}
points <- st_join(points, la, join = st_within)
# Cropped points with a local authority
plot(st_geometry(points[!is.na(points$local_authority), ]), col = points$capacity)
```

Now we can sum capacity available in each authority.
```{r}
capacity <- points %>%
  group_by(code) %>%
  summarise(total = sum(capacity)) %>%
  st_set_geometry(NULL) # remove the geometry column
```

Next, download census population data using `opendatascot` package and calculate
bicycle parking capacity per person.

```{r}
population <- ods_dataset("census-population-2001", geography = "la")
population <- population %>%
  filter(measureType == "count",
         age == "all",
         gender == "all")

total_points <- inner_join(capacity, population, by = c("code" = "refArea"))

# Calculate the pop / bicycle ratio
total_points$value <- as.numeric(total_points$value)
total_points <- total_points %>%  mutate(ratio = total / value)

# Join to authority areas
la_totals <- inner_join(la, total_points, by = c("code" = "code"))

```

Plot data on map:

```{r}
p3 <- ggplot(la_totals) +
  geom_sf(aes(fill = ratio), alpha = 0.5) +
  scale_colour_viridis_c()

plot_gg(p3, multicore = TRUE)
render_camera(zoom = 0.4, theta = -45, phi = 30)
Sys.sleep(0.2)
render_snapshot()
rgl::rgl.close()


```

### Availability of Public Bicycle Parking Capacity

Alternatively, we could present the data as a league table:

```{r}
total <- st_set_geometry(la_totals, NULL)
total <- mutate(total,  "per_100" = ratio * 100)

# make table
arrange(total, desc(per_100)) %>%
  mutate('No.' = seq_along(local_authority)) %>%
  select(No.,
         "Local Authority" = local_authority,
         "Capacity per 100 people" = per_100) %>%
  knitr::kable()

```
